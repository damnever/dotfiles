snippet #coding
# -*- coding: utf-8 -*-
$0
endsnippet


snippet fi
from __future__ import print_function, division, absolute_import
$0
endsnippet


snippet traceback
import traceback, sys
traceback.print_exception(*sys.exc_info())
endsnippet


snippet try
try:
    $1
except $2:
    $3
else:
    $4
finally:
    $5
endsnippet


snippet class
class Name(object):

    def __init__(self, $1):
        $2

    def __repr__(self):
        return ""
    __str__ = __repr__
endsnippet


snippet deco
def deco(func):
    functools.wraps(func)
    def _wrap(*args, **kwargs):
        $1
        return func(*args, **kwargs)
    return _wrap
endsnippet


snippet decoa
def decoa($1):
    def _deco(func):
        @functools.wraps(func)
        def _wrap(*args, **kwargs):
            $2
            return func(*args, **kwargs)
        return _wrap
    return _deco
endsnippet
