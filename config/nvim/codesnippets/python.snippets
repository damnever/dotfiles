snippet #coding
# -*- coding: utf-8 -*-
$0
endsnippet


snippet fi
from __future__ import print_function, division, absolute_import
$0
endsnippet


snippet traceback
import traceback, sys
traceback.print_exception(*sys.exc_info())
endsnippet


snippet callloc
import sys
frame = sys._getframe($1)
print('{0}:{1}'.format(frame.f_code.co_filename, frame.f_lineno))
endsnippet


snippet try
try:
    $1
except $2:
    $3
else:
    $4
finally:
    $5
endsnippet


snippet class
class $1(object):

    def __init__(self, $2):
        $3

    def __repr__(self):
        return "$4"
    __str__ = __repr__
endsnippet


snippet deco
def deco(func):
    functools.wraps(func)
    def _wrap(*args, **kwargs):
        $1
        return func(*args, **kwargs)
    return _wrap
endsnippet


snippet decoa
def $1($2):
    def _deco(func):
        @functools.wraps(func)
        def _wrap(*args, **kwargs):
            $3
            return func(*args, **kwargs)
        return _wrap
    return _deco
endsnippet
